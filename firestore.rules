rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Правила для пользователей
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Правила для постов/вакансий
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null && (resource.data.authorId == request.auth.uid || (request.auth.token.admin == true));
      allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || (request.auth.token.admin == true));
    }

    // Правила для чат-комнат
    match /chatRooms/{chatId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow delete: if false;
      
      // Правила для сообщений в чат-комнатах
      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatId)).data.participants;
        allow create: if request.auth != null && 
                       request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatId)).data.participants &&
                       request.resource.data.senderId == request.auth.uid;
        allow update: if request.auth != null && resource.data.senderId == request.auth.uid;
        allow delete: if false;
      }
    }

    // Правила для заявок на вакансии
    match /applications/{applicationId} {
      allow read: if request.auth != null && 
                   (resource.data.applicantId == request.auth.uid || 
                    get(/databases/$(database)/documents/posts/$(resource.data.postId)).data.authorId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.applicantId == request.auth.uid;
      allow update: if request.auth != null && 
                     get(/databases/$(database)/documents/posts/$(resource.data.postId)).data.authorId == request.auth.uid;
      allow delete: if false;
    }

    // Правила для микро-стажировок
    match /microInternships/{internshipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.employerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.employerId == request.auth.uid;
    }

    // Правила для заявок на микро-стажировки
    match /microApplications/{applicationId} {
      allow read: if request.auth != null && 
                   (resource.data.studentId == request.auth.uid || 
                    get(/databases/$(database)/documents/microInternships/$(resource.data.microInternshipId)).data.employerId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.studentId == request.auth.uid;
      allow update: if request.auth != null && 
                     get(/databases/$(database)/documents/microInternships/$(resource.data.microInternshipId)).data.employerId == request.auth.uid;
      allow delete: if false;
    }

    // Правила для микро-заданий
    match /microTasks/{taskId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
                      && request.resource.data.employerId == request.auth.uid
                      && request.resource.data.price >= 1000
                      && request.resource.data.price <= 20000
                      && request.resource.data.title.size() >= 5
                      && request.resource.data.title.size() <= 100
                      && request.resource.data.description.size() >= 20
                      && request.resource.data.description.size() <= 5000;
      allow update: if request.auth != null
                     && (resource.data.employerId == request.auth.uid || request.auth.token.admin == true);
      allow delete: if request.auth != null 
                     && resource.data.employerId == request.auth.uid
                     && resource.data.status == 'open';
    }

    // Правила для заявок на микро-задания
    match /microTaskApplications/{appId} {
      allow create: if request.auth != null
                      && request.resource.data.applicantId == request.auth.uid
                      && exists(/databases/$(database)/documents/microTasks/$(request.resource.data.microTaskId))
                      && get(/databases/$(database)/documents/microTasks/$(request.resource.data.microTaskId)).data.status == 'open';
      allow read: if request.auth != null 
                    && (resource.data.applicantId == request.auth.uid 
                        || get(/databases/$(database)/documents/microTasks/$(resource.data.microTaskId)).data.employerId == request.auth.uid
                        || request.auth.token.admin == true);
      allow update: if request.auth != null
                     && (get(/databases/$(database)/documents/microTasks/$(resource.data.microTaskId)).data.employerId == request.auth.uid
                         || request.auth.token.admin == true);
      allow delete: if false;
    }

    // Правила для результатов выполнения заданий
    match /microTaskSubmissions/{subId} {
      allow create: if request.auth != null 
                      && request.resource.data.submitterId == request.auth.uid
                      && exists(/databases/$(database)/documents/microTasks/$(request.resource.data.microTaskId))
                      && get(/databases/$(database)/documents/microTasks/$(request.resource.data.microTaskId)).data.assigneeId == request.auth.uid
                      && get(/databases/$(database)/documents/microTasks/$(request.resource.data.microTaskId)).data.status == 'in_progress';
      allow read: if request.auth != null 
                    && (resource.data.submitterId == request.auth.uid 
                        || get(/databases/$(database)/documents/microTasks/$(resource.data.microTaskId)).data.employerId == request.auth.uid
                        || request.auth.token.admin == true);
      allow update: if request.auth != null
                     && (get(/databases/$(database)/documents/microTasks/$(resource.data.microTaskId)).data.employerId == request.auth.uid
                         || request.auth.token.admin == true);
      allow delete: if false;
    }

    // Правила для платежей
    match /microTaskPayments/{payId} {
      allow read: if request.auth != null
                    && (resource.data.employerId == request.auth.uid 
                        || resource.data.assigneeId == request.auth.uid
                        || request.auth.token.admin == true);
      allow create: if false; // Создаётся только из Cloud Function
      allow update: if false; // Меняется только из Cloud Function
      allow delete: if false; // Запрещаем удаление платежей
    }

    // Правила для споров
    match /microTaskDisputes/{disputeId} {
      allow create: if request.auth != null
                      && (request.resource.data.employerId == request.auth.uid
                          || request.resource.data.assigneeId == request.auth.uid)
                      && exists(/databases/$(database)/documents/microTasks/$(request.resource.data.microTaskId));
      allow read: if request.auth != null
                    && (resource.data.employerId == request.auth.uid 
                        || resource.data.assigneeId == request.auth.uid
                        || request.auth.token.admin == true);
      allow update: if request.auth != null && request.auth.token.admin == true;
      allow delete: if false;
    }

    // Правила для проектов
    match /projects/{id} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
    }

    // Правила для профилей сетей
    match /networkingProfiles/{uid} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == uid;
    }

    // Правила для заявок на проекты
    match /projectApplications/{id} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUid;
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.fromUid || 
                    request.auth.uid == get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerId);
      allow update: if request.auth != null && 
                     request.auth.uid == get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerId;
    }

    // Правила для матчей
    match /matches/{uid}/{matchId} {
      allow read: if request.auth != null && request.auth.uid == uid;
    }

    // Правила для очереди матчей (только для админов и серверных функций)
    match /matchJobs/{id} {
      allow read, write: if false; // Только через Cloud Functions
    }

    // Правила для отзеркаленных матчей проектов
    match /matchesProjects/{projectId}/{matchId} {
      allow read: if request.auth != null && 
                   request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId;
    }

    // Правила для чатов (дублируем для совместимости)
    match /chats/{chatId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
    }

    // Правила для сообщений в чатах (дублируем для совместимости)
    match /chats/{chatId}/messages/{messageId} {
      allow read: if request.auth != null && 
                   request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.senderId && 
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Логи аудита модераторов
    match /auditLog/{logId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow create: if request.auth != null && request.auth.token.admin == true;
      allow update: if false; // Записи аудита не должны изменяться
      allow delete: if false; // Записи аудита не должны удаляться
    }
  }
} 